name: React CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # Step 1: 코드 체크아웃
      - name: 코드 체크아웃
        uses: actions/checkout@v4

      # Step 2: Node.js 설정
      - name: Node.js 설정
        uses: actions/setup-node@v4
        with:
          node-version: '22.x'

      # Step 3: 의존성 설치 및 테스트 실행
      - name: 의존성 설치 및 테스트 실행
        run: |
          npm ci
          npm run test || true # 테스트 실패 시 진행 계속, 필요에 따라 수정

      # Step 4: Docker Hub 로그인
      - name: Docker Hub 로그인
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Step 5: DOCKER_USERNAME 검증
      - name: DOCKER_USERNAME 확인
        run: |
          echo "DOCKER_USERNAME is set to: ${{ secrets.DOCKER_USERNAME }}"
          if [ -z "${{ secrets.DOCKER_USERNAME }}" ]; then
            echo "오류: DOCKER_USERNAME이 비어 있거나 설정되지 않았습니다."
            exit 1
          fi
          if ! echo "${{ secrets.DOCKER_USERNAME }}" | grep -qE '^[a-zA-Z0-9_-]+$'; then
            echo "오류: DOCKER_USERNAME에 유효하지 않은 문자가 포함되어 있습니다."
            exit 1
          fi

      # Step 6: Docker 이미지 빌드 및 푸시
      - name: Docker 이미지 빌드 및 푸시
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/react_image:latest
          build-args: |
            VITE_LOGIN_API_URL=${{ secrets.VITE_LOGIN_API_URL }}
            VITE_REGISTRATION_API_URL=${{ secrets.VITE_REGISTRATION_API_URL }}
            VITE_USER_INFO_API_URL=${{ secrets.VITE_USER_INFO_API_URL }}
            VITE_USER_COUNT_API_URL=${{ secrets.VITE_USER_COUNT_API_URL }}
            VITE_FILE_COUNT_API_URL=${{ secrets.VITE_FILE_COUNT_API_URL }}
            VITE_USER_DATA_LIST_API_URL=${{ secrets.VITE_USER_DATA_LIST_API_URL }}
            VITE_RECENT_USER_DATA_API_URL=${{ secrets.VITE_RECENT_USER_DATA_API_URL }}
            VITE_ALL_USER_LIST=${{ secrets.VITE_ALL_USER_LIST }}
        env:
          DOCKER_BUILDKIT: 1

      # Step 7: 빌드 인자 및 태그 디버깅
      - name: 빌드 인자 및 태그 확인
        run: |
          echo "사용된 빌드 인자:"
          echo "VITE_LOGIN_API_URL=${{ secrets.VITE_LOGIN_API_URL }}"
          echo "VITE_REGISTRATION_API_URL=${{ secrets.VITE_REGISTRATION_API_URL }}"
          echo "VITE_USER_INFO_API_URL=${{ secrets.VITE_USER_INFO_API_URL }}"
          echo "VITE_USER_COUNT_API_URL=${{ secrets.VITE_USER_COUNT_API_URL }}"
          echo "VITE_FILE_COUNT_API_URL=${{ secrets.VITE_FILE_COUNT_API_URL }}"
          echo "VITE_USER_DATA_LIST_API_URL=${{ secrets.VITE_USER_DATA_LIST_API_URL }}"
          echo "VITE_RECENT_USER_DATA_API_URL=${{ secrets.VITE_RECENT_USER_DATA_API_URL }}"
          echo "VITE_ALL_USER_LIST=${{ secrets.VITE_ALL_USER_LIST }}"
          echo "Docker 태그: ${{ secrets.DOCKER_USERNAME }}/react_image:latest"

      # Step 8: SSH 설정 확인
      - name: SSH 설정 확인
        run: |
          echo "SSH_HOST is set to: ${{ secrets.SSH_HOST }}"
          echo "SSH_USER is set to: ${{ secrets.SSH_USER }}"
          echo "SSH_PORT is set to: ${{ secrets.SSH_PORT }}"
          echo "SSH_PRIVATE_KEY is set: ${{ secrets.SSH_PRIVATE_KEY != '' }}"
          if [ -z "${{ secrets.SSH_HOST }}" ]; then
            echo "오류: SSH_HOST가 비어 있거나 설정되지 않았습니다."
            exit 1
          fi
          if [ -z "${{ secrets.SSH_USER }}" ]; then
            echo "오류: SSH_USER가 비어 있거나 설정되지 않았습니다."
            exit 1
          fi
          if [ -z "${{ secrets.SSH_PRIVATE_KEY }}" ]; then
            echo "오류: SSH_PRIVATE_KEY가 비어 있거나 설정되지 않았습니다."
            exit 1
          fi
          if [ -z "${{ secrets.SSH_PORT }}" ]; then
            echo "오류: SSH_PORT가 비어 있거나 설정되지 않았습니다. 기본값 22를 사용하려면 22로 설정하세요."
            exit 1
          fi

      # Step 9: SSH 키 설정
      - name: SSH 키 설정
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H -p ${{ secrets.SSH_PORT }} ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts

      # Step 10: 서버 배포
      - name: 서버 배포
        run: |
          ssh -i ~/.ssh/id_rsa -p ${{ secrets.SSH_PORT }} ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} '
            sudo docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }} || { echo "Docker login 실패"; exit 1; }
            echo "기존 컨테이너 정리 중..."
            sudo docker stop react_app || true
            sudo docker rm react_app || true
            sudo docker stop react_image || true
            sudo docker rm react_image || true
            echo "포트 300 상태 확인..."
            sudo netstat -tuln | grep :300 || echo "포트 300이 사용 중이지 않습니다."
            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/react_image:latest || { echo "Docker pull 실패"; exit 1; }
            sudo docker network create app-network || true
            sudo docker run -d --name react_app \
              --network app-network \
              -p 300:5173 \
              ${{ secrets.DOCKER_USERNAME }}/react_image:latest || { echo "Docker run 실패"; exit 1; }
            sudo docker image prune -f
          '
